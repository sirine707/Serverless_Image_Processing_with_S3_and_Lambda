AWSTemplateFormatVersion: '2010-09-09'
Description: 'Dynamic Image Transformation for Amazon CloudFront - Infrastructure template'

Parameters:
  SolutionName:
    Type: String
    Description: The solution name
    Default: dynamic-image-transformation

  SolutionID:
    Type: String
    Description: The solution ID
    Default: SO0023

  SourceBuckets:
    Type: String
    Description: Source bucket names (comma-delimited) that contain original images
    Default: ''

  CorsEnabled:
    Type: String
    Description: Enable CORS on API Gateway responses
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'

  CorsOrigin:
    Type: String
    Description: CORS origin domain, (e.g. example.com). Specify '*' to allow any origin.
    Default: '*'

  EnableSignature:
    Type: String
    Description: Enable signature for URL
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'

  EnableDefaultFallbackImage:
    Type: String
    Description: Enable default fallback image
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'

  DefaultFallbackImageS3Bucket:
    Type: String
    Description: S3 bucket name for default fallback image. This must be a valid bucket.
    Default: ''

  DefaultFallbackImageS3Key:
    Type: String
    Description: S3 key for default fallback image. This must be a valid key.
    Default: ''

  LogRetentionPeriod:
    Type: Number
    Description: CloudWatch Logs retention period in days
    Default: 7
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

Resources:
  # S3 Buckets
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins:
              - !If [CorsEnabledCondition, !Ref CorsOrigin, '']
            ExposedHeaders: ['ETag']
            MaxAge: 3600
      LoggingConfiguration:
        DestinationBucketName: !Ref S3AccessLogsBucket
        LogFilePrefix: source-bucket-logs/

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: AutoExpire
            Status: Enabled
            ExpirationInDays: 90
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins:
              - !If [CorsEnabledCondition, !Ref CorsOrigin, '']
            ExposedHeaders: ['ETag']
            MaxAge: 3600
      LoggingConfiguration:
        DestinationBucketName: !Ref S3AccessLogsBucket
        LogFilePrefix: output-bucket-logs/

  S3AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: AutoExpire
            Status: Enabled
            ExpirationInDays: 90

  # DynamoDB Table for Image Metadata
  ImageMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SolutionName}-ImageMetadata"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: imageId
          AttributeType: S
      KeySchema:
        - AttributeName: imageId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Solution
          Value: !Ref SolutionID

  # Lambda Function Role
  ImageHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${SourceBucket}/*"
                  - !If [EnableDefaultFallbackImageCondition, !Sub "arn:aws:s3:::${DefaultFallbackImageS3Bucket}/${DefaultFallbackImageS3Key}", !Ref AWS::NoValue]
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:HeadObject
                Resource: !Sub "arn:aws:s3:::${OutputBucket}/*"
        - PolicyName: DynamoDbAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !GetAtt ImageMetadataTable.Arn

  # Lambda Function
  ImageHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Dynamic Image Transformation for Amazon CloudFront
      Handler: index.handler
      Role: !GetAtt ImageHandlerRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub "${DeploymentPrefix}/image-handler.zip"
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 30
      Environment:
        Variables:
          SOURCE_BUCKETS: !If [SourceBucketsProvided, !Ref SourceBuckets, !Ref SourceBucket]
          OUTPUT_BUCKET_NAME: !Ref OutputBucket
          METADATA_TABLE_NAME: !Ref ImageMetadataTable
          CORS_ENABLED: !Ref CorsEnabled
          CORS_ORIGIN: !Ref CorsOrigin
          ENABLE_SIGNATURE: !Ref EnableSignature
          ENABLE_DEFAULT_FALLBACK_IMAGE: !Ref EnableDefaultFallbackImage
          DEFAULT_FALLBACK_IMAGE_BUCKET: !If [EnableDefaultFallbackImageCondition, !Ref DefaultFallbackImageS3Bucket, '']
          DEFAULT_FALLBACK_IMAGE_KEY: !If [EnableDefaultFallbackImageCondition, !Ref DefaultFallbackImageS3Key, '']

  # CloudFront Distribution
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: APIGateway
            DomainName: !Sub "${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: !Sub "/${ApiGatewayStage}"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1.2]
        Enabled: true
        Comment: "Distribution for dynamic image transformation"
        DefaultCacheBehavior:
          TargetOriginId: APIGateway
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          ForwardedValues:
            QueryString: true
            Headers:
              - Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true

Conditions:
  CorsEnabledCondition: !Equals [!Ref CorsEnabled, 'Yes']
  SourceBucketsProvided: !Not [!Equals [!Ref SourceBuckets, '']]
  EnableDefaultFallbackImageCondition: !Equals [!Ref EnableDefaultFallbackImage, 'Yes']

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}"

  CloudfrontEndpoint:
    Description: CloudFront Distribution domain name
    Value: !GetAtt CloudfrontDistribution.DomainName

  SourceBucketName:
    Description: S3 bucket for source images
    Value: !Ref SourceBucket

  OutputBucketName:
    Description: S3 bucket for processed images
    Value: !Ref OutputBucket

  ImageMetadataTableName:
    Description: DynamoDB table for image metadata
    Value: !Ref ImageMetadataTable
